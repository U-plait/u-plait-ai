name: FastAPI CI/CD

on:
  push:
    branches: [ "main", "develop" ]

env:
  RAW_ACTOR: ${{ github.actor }}
  VERSION: ${{ github.sha }}
  CONTAINER_NAME: uplait-ai
  IMAGE_NAME: myproject

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /home/ubuntu/docker-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.RAW_ACTOR }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        run: |
          LOWER_ACTOR=$(echo "${RAW_ACTOR}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${LOWER_ACTOR}/${IMAGE_NAME}:latest
          echo "Using image name: $IMAGE"
          docker buildx build \
            --push \
            --tag "$IMAGE" \
            .

  deploy:
    name: Deploy
    needs: build
    runs-on: [ self-hosted, label-1 ]
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.RAW_ACTOR }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Deploy container
        run: |
          LOWER_ACTOR=$(echo "${RAW_ACTOR}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/${LOWER_ACTOR}/${IMAGE_NAME}:latest
          CONTAINER_NAME=${CONTAINER_NAME}

          echo "Stopping and removing any existing container named $CONTAINER_NAME"
          if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
          fi

          echo "Removing old image if exists: $IMAGE"
          if [ "$(docker images -q $IMAGE)" ]; then
            docker rmi $IMAGE
          fi

          echo "Running new container"
          docker run -d -p 8000:8000 --name $CONTAINER_NAME --restart always $IMAGE
